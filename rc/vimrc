" Sinled vim file
" source https://github.com/Sinled/dotfiles/blob/master/rc/vimrc


set nocompatible              " be iMproved, required
filetype off                  " required



set clipboard=unnamed       " use os x clipboard
set noeb vb t_vb=           " disable error beeping

" --------------- Plugins ------------------------------------------

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim


call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'junegunn/seoul256.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
    set laststatus=2                                  " vim-airline doesn't appear until I create a new split
    let g:airline_theme='lucius'                      " Colorscheme for airline
    let g:airline_left_sep = ''                       " Set custom left separator
    let g:airline_right_sep = ''                      " Set custom right separator
    let g:airline#extensions#tabline#enabled = 1      " Enable airline for tab-bar
    let g:airline#extensions#tabline#show_buffers = 0 " Don't display buffers in tab-bar with single tab
    let g:airline#extensions#tabline#fnamemod = ':t'  " Display only filename in tab
    let g:airline_section_y = ''                      " Don't display encoding
    let g:airline#extensions#tabline#tab_min_count = 2 " configure the minimum number of tabs needed to show the tabline.


" Syntax Highlighting
Plugin 'plasticboy/vim-markdown'


" Linting
Plugin 'editorconfig/editorconfig-vim'

" Syntax support
Plugin 'othree/javascript-libraries-syntax.vim'
    let g:used_javascript_libs = 'react'

Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
    let g:jsx_ext_required = 0                         " Allow JSX in normal JS files

Plugin 'cakebaker/scss-syntax.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required

" Setup netrw as NERDTree

let g:netrw_banner = 0        " Disable netrw banner
let g:netrw_liststyle = 3     " Render directories as a tree
let g:netrw_browse_split = 4  " Open selected files in previous window
let g:netrw_altv = 1          "
let g:netrw_winsize = 20      " Set initial split size
" Open netrw panel on startup
" augroup ProjectDrawer
"   autocmd!
"   autocmd VimEnter * :Vexplore
" augroup END


" --------------- Color Scheme -------------------------------------

" Color Scheme
" Unified color scheme (default: dark)
colo seoul256

" Light color scheme
colo seoul256-light

" Switch
set background=dark



" --------------- Syntax -------------------------------------------

syntax enable                 " Enable syntax highlighting.



" --------------- Indent -------------------------------------------

set shiftwidth=4              " Number of spaces to use for each step of (auto)indent.
set tabstop=4
set smarttab                  " When on, a <Tab> in front of a line inserts blanks according to 'shiftwidth'.  'tabstop' or 'softtabstop' is used in other places
set expandtab                 " In Insert mode: Use the appropriate number of spaces to insert a Tab
set autoindent                " Copy indent from current line when starting a new line
set smartindent               " Do smart autoindenting when starting a new line.  Works for C-like programs
set list                      " show invisibles
set lcs=tab:▸\ ,eol:¬         " Use the same symbols as TextMate for tabstops and EOLs



" --------------- Encoding -----------------------------------------

set encoding=utf-8 nobomb
set fileencoding=utf-8        " Use UTF-8 without BOM


" --------------- Interface ----------------------------------------

set guifont=ConsolasLiga:h17  " Set default font and font size
set linespace=3               " Increase line spacing
set wildmenu                  " Visual autocomplete for command menu
set showmatch                 " Highlight matching [{()}]
" set colorcolumn=80            " bad and extrabad line sizes / disable because looks horrible
set showcmd                   " Display incomplete commands.
set scrolloff=8               " Start scrolling when we're 8 lines away from margins

" Highlight current line in active window or buffer
augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END


set ignorecase
set smartcase

" Show open buffers with prompt to switch
nnoremap <Tab> :buffers<CR>:buffer<Space>


" --------------- Search -------------------------------------------

set incsearch  " While typing a search command, show where the pattern, as it was typed so far, matches
set hlsearch   " highlight all search matches
set wrapscan   " Searches wrap around the end of the file.  Also applies to |]s| and |[s|, searching for spelling mistakes

" Press return to temporarily get out of the highlighted search.
nnoremap <CR> :nohlsearch<CR><CR>

" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**

" Ignore some folders in grep and find searches
set wildignore+=**/tmp/**,**/node_modules/**,**/bower_components/**,**/.idea/**

" --------------- Folding------------------------------------------

set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max
set foldmethod=indent   " fold based on indent level


" space open/closes folds
nnoremap <space> za



" --------------- Backups -----------------------------------------

" backup and writebackup enable backup support. As annoying as this can be
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup



" --------------- Workflow ---------------------------------------

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif


" Remember info about open buffers on close
set viminfo^=%
" Dont ask to save buffer when changing buffer
set hidden


fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun

" Automatically clean trailing whitespaces on save
autocmd BufWritePre *.* :call <SID>StripTrailingWhitespaces()




